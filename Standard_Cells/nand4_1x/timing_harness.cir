Test Harness  for sky130_vsdnand4_1x
.include 'sky130nm.lib' 
.include 'custom_stdcell/nand4_1x/sky130_vsdnand4_1x.spice'
    .options savecurrents 
    X1 A B C D VGND VNB VPB VPWR Y sky130_vsdnand4_1x
    * Power Supplies
    VVPWR VPWR 0 DC 1.8
VVPB VPB 0 DC 1.8
VVGND VGND 0 DC 0
VVNB VNB 0 DC 0
    * Signal Supplies
    VD D 0 PULSE(0 1.8 0 0.01n 0.01n 50ns 100ns)
VA A 0 DC 1.8
VB B 0 DC 1.8
VC C 0 DC 1.8
    * CLoad 
    CLoad Y 0 1f
    * Control Generations
    .control
    let run  = 0 
 foreach in_delay 0.01n 0.023n 0.0531329n 0.122474n 0.282311n 0.650743n 1.5n
    * Initiating Text Files in folder data
    echo "input_transition:$in_delay" >> custom_stdcell/nand4_1x/data/timing/input_transition.txt
    echo "input_transition:$in_delay" >> custom_stdcell/nand4_1x/data/timing/cell_fall.txt
    echo "input_transition:$in_delay" >> custom_stdcell/nand4_1x/data/timing/cell_rise.txt
    echo "input_transition:$in_delay" >> custom_stdcell/nand4_1x/data/timing/fall_transition.txt
    echo "input_transition:$in_delay" >> custom_stdcell/nand4_1x/data/timing/rise_transition.txt
    echo "input_transition:$in_delay" >> custom_stdcell/nand4_1x/data/timing/rise_power.txt
    echo "input_transition:$in_delay" >> custom_stdcell/nand4_1x/data/timing/fall_power.txt
    * 1.666 to match the slew rate
    let actual_rtime = $in_delay*1.666   

    * Input Vector - Load Cap values(index2)
    foreach out_cap 0.0005p 0.0012105800p 0.002931p 0.00709641p 0.0171815p 0.0415991p 0.100718p
        reset
        
        * Changing the V2 Supply Rise time as per the Input Rise Time vector
        alter @VD[pulse] = [ 0 1.8 0 $&actual_rtime $&actual_rtime 50ns 100ns ]
        
        * Changing the C1 value as per the foreach list
        alter CLOAD $out_cap
        
        tran 0.01n 300ns
        run

        reset
        * Verification of INPUT RISE TIME
        meas tran ts1 when v(D)=1.44 RISE=1 
        meas tran ts2 when v(D)=0.36 RISE=1
        meas tran ts3 when v(D)=1.44 FALL=1 
        meas tran ts4 when v(D)=0.36 FALL=1
        let RISE_IN_SLEW = (ts1-ts2)/1e-09
        let FALL_IN_SLEW = (ts4-ts3)/1e-09
        echo "actual_rise_slew:$&RISE_IN_SLEW" >> custom_stdcell/nand4_1x/data/timing/input_transition.txt
        echo "actual_fall_slew:$&FALL_IN_SLEW" >> custom_stdcell/nand4_1x/data/timing/input_transition.txt


        print run
        * Measuring Cell Fall Time @ 50% of VDD(1.8V) 
        meas tran tinfall when v(D)=0.9 FALL=1 
        meas tran tofall when v(Y)=0.9 FALL=1
        let cfall = (tofall-tinfall)/1e-09
        if abs(cfall)>20
            meas tran tinfall when v(D)=0.9 Rise=1 
            meas tran tofall when v(Y)=0.9 FALL=1
            let cfall = abs(tofall-tinfall)/1e-09
        end
        print cfall
        echo "out_cap:$out_cap:cell_fall:$&cfall" >> custom_stdcell/nand4_1x/data/timing/cell_fall.txt

        * Measuring Cell Rise Time @ 50% of VDD(1.8V) 
        meas tran tinrise when v(D)=0.9 RISE=1 
        meas tran torise when v(Y)=0.9 RISE=1
        let crise = (torise-tinrise)/1e-09
        if abs(crise)>20
            meas tran tinrise when v(D)=0.9 FALL=1 
            meas tran torise when v(Y)=0.9 RISE=1
            let crise = abs(tinrise-torise)/1e-09
        end
        print crise
        echo "out_cap:$out_cap:cell_rise:$&crise" >> custom_stdcell/nand4_1x/data/timing/cell_rise.txt

        * Measuring Fall Transion Time @ 80-20% of VDD(1.8V) 
        meas tran ft1 when v(Y)=1.44 FALL=2 
        meas tran ft2 when v(Y)=0.36 FALL=2
        let fall_tran = (ft2-ft1)/1e-09
        print fall_tran
        echo "out_cap:$out_cap:fall_transition:$&fall_tran" >> custom_stdcell/nand4_1x/data/timing/fall_transition.txt
        
        * Measuring Rise Transion Time @ 20-80% of VDD(1.8V) 
        meas tran rt1 when v(Y)=1.44 RISE=2 
        meas tran rt2 when v(Y)=0.36 RISE=2
        let rise_tran = ((rt1-rt2)/1e-09)
        print rise_tran
        echo "out_cap:$out_cap:rise_transition:$&rise_tran" >> custom_stdcell/nand4_1x/data/timing/rise_transition.txt
        * Set unate to 1 for positive_unate and 0 for negative_unate
        let pos_unate = 0
        let neg_unate = 1 
        if pos_unate
            * Measuring Rising Power if Positive Unate
            meas tran pt1 when v(D)=0.1 RISE=2
            meas tran pt2 when v(Y)=1.79 RISE=2
            * To avoid error due to peaks
            if pt1 > pt2 
                meas tran pt2 when v(Y)=1.79 RISE=3
            end
            let pwr_stc1 = (@CLOAD[i])*Y 
            meas tran pwr_swt1 INTEG pwr_stc1 from=pt1 to=pt2
            let pwr_swt1 = pwr_swt1/1p
            echo "out_cap:$out_cap:power_switch:$&pwr_swt1" >> custom_stdcell/nand4_1x/data/timing/rise_power.txt

            * Measuring Falling Power if Positive Unate
            meas tran pt1 when v(D)=1.79 FALL=2
            meas tran pt2 when v(Y)=0.1 FALL=2
            let pwr_stc2 = (@CLOAD[i])*Y - (@(VVPWR#branch)*VPWR)
            meas tran pwr_swt2 INTEG pwr_stc2 from=pt1 to=pt2
            let pwr_swt2 = pwr_swt2/1p
            echo "out_cap:$out_cap:power_switch:$&pwr_swt2" >> custom_stdcell/nand4_1x/data/timing/fall_power.txt
        end
        if neg_unate
            * Measuring Rising Power if Negative Unate
            meas tran pt1 when v(D)=1.75 FALL=2
            meas tran pt2 when v(Y)=1.75 RISE=2
            if pt1 > pt2
                meas tran pt1 when v(D)=1.75 FALL=3
            end
            let pwr_stc1 = (@CLOAD[i])*Y
            meas tran pwr_swt1 INTEG pwr_stc1 from=pt1 to=pt2
            let pwr_swt1 = pwr_swt1/1p
            echo "out_cap:$out_cap:power_switch:$&pwr_swt1" >> custom_stdcell/nand4_1x/data/timing/rise_power.txt

            * Measuring Falling Power if Negative Unate
            meas tran pt1 when v(D)=0.1 RISE=2
            meas tran pt2 when v(Y)=0.1 RISE=2
            let pwr_stc2 = (@CLOAD[i])*Y - (@(VVPWR#branch)*VPWR)
            meas tran pwr_swt2 INTEG pwr_stc2 from=pt1 to=pt2
            let pwr_swt2 = pwr_swt2/1p
            echo "out_cap:$out_cap:power_switch:$&pwr_swt2" >> custom_stdcell/nand4_1x/data/timing/fall_power.txt
        end
        let run = run + 1
        * plot a y
    end
    end
    rusage
    quit
    .endc